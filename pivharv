#!/usr/bin/env ruby

# Workaround for bugged harvested
Dir.chdir(File.dirname(__FILE__)) do

  require 'tempfile'
  require 'shellwords'
  require 'rubygems'
  require 'optparse'
  require 'date'
  require 'dotenv'
  require 'pivotal-tracker'
  require 'harvested'
  require 'colorize'
  require_relative 'config/pivharv/projects'
  ##############################################################################

  Dotenv.load

  PivotalTracker::Client.token = ENV["PIVOTAL_TRACKER_API_TOKEN"]
  PivotalTracker::Client.timeout = 50
  harvest = Harvest.client(
    subdomain: ENV["HARVEST_SUBDOMAIN"],
    username: ENV["HARVEST_USERNAME"],
    password: ENV["HARVEST_PASSWORD"]
  )
  ##############################################################################

  @options = {
    days_index: 0
  }
  ##############################################################################

  def show(harvest)
    puts "# Fetching today's Harvest time entries...".cyan
    harvest_time = harvest.time.all(Date.today + @options[:days_index])
    if harvest_time.count > 0
      puts "---".yellow
      harvest_time.each_with_index do |time, i|
        puts "#{time.project}".magenta + ":".yellow
        puts "  harvest_id".magenta + ": ".yellow + "#{time.project_id}".green
        puts "  hours".magenta + ": ".yellow + "#{time.hours}".green
        puts "  notes".magenta + ": |".yellow
        if time.notes.respond_to? :lines
          time.notes.lines.each do |line|
            puts "    " << line.strip.green
          end
        end
      end
    else
      puts "# No time today".cyan
    end
  end
  ##############################################################################

  OptionParser.new do |opts|

    opts.banner = "Usage: pivharv project action pivotal_tracker_id"

    opts.on("-d DAYS_INDEX", OptionParser::DecimalInteger,
    "eg. 1, 2, -1 " <<
    "(default: #{@options[:days_index]})") do |d|
      @options[:days_index] = d
    end

    opts.on("--yesterday") do |yesterday|
      @options[:days_index] = -1
    end

  end.parse!
  ##############################################################################

  if ARGV.length == 0
    # just show harvest, called below
  elsif ARGV.length == 1 && projects[ARGV[0]]
    project = ARGV[0].downcase
    puts "# Fetching Harvest time entry...".cyan
    time_entry =
      harvest.time.all(Date.today + @options[:days_index]).
      select { |t| t.project_id.to_i == projects[project]["harvest_id"] }.
      first
    temp_notes = Tempfile.new('pivharv_notes')
    File.write(temp_notes, time_entry.notes)
    temp_notes.rewind
    system "$EDITOR #{temp_notes.path}"
    if File.read(temp_notes) != time_entry.notes
      updated_time_entry = time_entry.update({"notes" => File.read(temp_notes)})
      puts "# Changes made; updating Harvest time entry...".cyan
      harvest.time.update(updated_time_entry)
    end
    temp_notes.close
    temp_notes.unlink
  elsif ARGV.length == 2
    project = ARGV[0].downcase
    harvest_line = '- - ' + ARGV[1]
    puts "# Fetching Harvest time entry...".cyan
    time_entry =
      harvest.time.all(Date.today + @options[:days_index]).
      select { |t| t.project_id.to_i == projects[project]["harvest_id"] }.
      first
    time_entry.notes ||= ""
    puts "# Updating Harvest time entry...".cyan
    updated_time_entry = time_entry.update(
      {"notes" => (time_entry.notes.lines.map(&:rstrip) <<
        harvest_line).join("\n")})
    harvest.time.update(updated_time_entry)
  elsif ARGV.length == 3
    project = ARGV[0].downcase
    action = ARGV[1].upcase
    story_id = ARGV[2].gsub(/\D/, '')
    puts "# Hitting Pivotal Tracker API...".cyan
    if projects[project]["pivotal_tracker_api_token"]
      PivotalTracker::Client.token =
        projects[project]["pivotal_tracker_api_token"]
    end
    story = PivotalTracker::Story.find(
      story_id,
      projects[project]["pivotal_tracker_id"])
    harvest_line =
      %Q{#{action} [#{story.story_type[0].upcase}] } +
      %Q{[#{story_id}] #{story.name}}
    puts "# Fetching Harvest time entry...".cyan
    time_entry =
      harvest.time.all(Date.today + @options[:days_index]).
      select { |t| t.project_id.to_i == projects[project]["harvest_id"] }.
      first
    time_entry.notes ||= ""
    puts "# Updating Harvest time entry...".cyan
    if time_entry.notes.include? "[#{story_id}]"
      new_notes = time_entry.notes
      new_notes_line_to_replace =
        new_notes.lines.select { |l| l.include? "[#{story_id}]" }.first
      new_notes.sub! new_notes_line_to_replace, (harvest_line + "\n")
      updated_time_entry = time_entry.update(notes: new_notes)
    else
      updated_time_entry = time_entry.update(
        {"notes" => (time_entry.notes.lines.map(&:rstrip) <<
          harvest_line).join("\n")})
    end
    harvest.time.update(updated_time_entry)
  else
    puts "# Bad input".light_red
    exit
  end

  show harvest
end

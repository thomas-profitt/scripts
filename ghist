#!/usr/bin/env ruby

require 'optparse'

begin
  require 'colorize'
  color = true
rescue LoadError
  color = false
end

require_relative 'lib/terminal_formatting'

options = {
  color: color,
  regex: false,
  execute_interactive: false,
  execute_index: false,
  delete: false,
  yes: false,
  include_pry_history: false
}

history_filenames = Dir[Dir.home << "/.*sh_history"]
query = nil

OptionParser.new do |opts|

  opts.banner =
    ["Usage: ghist [options] QUERY",
    "Searches your shell history file(s) for QUERY",
    "Can also interactively execute found commands.",
    "'colorize' ruby gem " <<
      (color ? "found".green.bold : "not found") << "; " <<
      "output will" << (color ? " " : " not ") << "be colorized."].
    join "\n"

  opts.on("-r", "--regex", "Consider QUERY a Ruby regex (without //)") do |r|
    options[:regex] = true
  end

  opts.on("-e", "--execute-interactive",
  "Execute a match by index (interactive)") do |e|
    options[:execute_interactive] = true
  end

  opts.on("-E INDEX", "--execute-index INDEX", OptionParser::DecimalInteger,
  "Execute match at INDEX eg. 0, 1, 2, -1, -2") do |e|
    options[:execute_index] = e
  end

  opts.on("-d", "--delete",
  "Delete a match from history by index (interactive)") do |d|
    options[:delete] = d
  end

  opts.on("-y", "--yes", "Automatically answer \"yes\" at prompts") do |y|
    options[:yes] = true
  end

  opts.on("-p", "--include-pry-history", "Include ~/.pry_history") do |p|
    options[:include_pry_history] = true
    history_filenames << (Dir.home << "/.pry_history")
  end

  opts.on("-f", "--file FILE", "Search FILE") do |f|
    history_filenames = [f]
  end

end.parse!

if ARGV.empty? || ARGV[0].empty?
  puts "No query provided; exiting"
  exit
end

query = options[:regex] ? Regexp.new(ARGV.join(" ")) : ARGV.join(" ")
history_content = history_filenames.
  map { |s| File.read(s) }.
  join("\n").
  encode('UTF-8', invalid: :replace).
  split("\n").
  map(&:strip).
  reverse.
  uniq.
  reverse
  # reverse.uniq.reverse will keep the last duplicate element, not the first.
history_matches = history_content.select { |s| s[query] }

exit if history_matches.empty?

if options[:color]
  colorized_history_matches =
    history_matches.map { |s| s.gsub query, s[query].green.bold }
end

if options[:execute_index]
  puts(
    if options[:color]
      colorized_history_matches[options[:execute_index]]
    else
      history_matches[options[:execute_index]]
    end)
  print "Execute this? [y/N]".send(options[:color] ? :yellow : :to_s) + "\n\t> "
  if options[:yes] || STDIN.gets.strip.downcase == "y"
    puts left_and_right("", "Executing").send(options[:color] ? :green : :to_s)
    exec history_matches[options[:execute_index]]
  else
    puts left_and_right("", "Not executed").send(options[:color] ? :red : :to_s)
  end
elsif options[:execute_interactive] || options[:delete]
  if options[:color]
    colorized_history_matches.each_with_index do |s, i|
      puts i.to_s.yellow << " " << s
    end
  else
    history_matches.each_with_index do |s, i|
      puts i.to_s << " " << s
    end
  end
  if options[:execute_interactive]
    print "Enter an index from above to execute that command:\n\t" <<
      "> ".send(options[:color] ? :yellow : :to_s)
  else
    print "Enter an index from above to DELETE it from history:\n\t".
    send(options[:color] ? :red : :to_s) <<
      "> ".send(options[:color] ? :yellow : :to_s)
  end
  raw_input = STDIN.gets.strip
  input_index = raw_input =~ /\A(-?)\d+\z/ ? raw_input.to_i : exit
  if history_matches[input_index]
    if options[:execute_interactive]
      puts left_and_right("", "Executing").
        send(options[:color] ? :green : :to_s)
      exec history_matches[input_index]
    else
      puts left_and_right("", "Deleting (NOT YET IMPLEMENTED)").
        send(options[:color] ? :red : :to_s)
    end
  else
    if options[:execute_interactive]
      puts left_and_right("", "Not executed").
        send(options[:color] ? :red : :to_s)
    else
      puts left_and+right("", "Not deleted").
        send(options[:color] ? :green : :to_s)
    end
  end
else
  matches = options[:color] ? colorized_history_matches : history_matches
  matches.each do |s|
    puts s
  end
end

